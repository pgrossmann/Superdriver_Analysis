###############################
### pre-processing functions

#' @param tab population file (usuallly of form r*.pop), tab separated
#' table sorted according to count of genotype
readPop <- function(tabFile) {
  tab <- read.csv(tabFile, sep="\t")
  tab[order(tab[,"count"], decreasing=T),]
}

#' read replicates of a simulation stored in one dir
#' @param dir directory containing population files of format r*.pop
#' @param whatPop wildcard expression to determine which population files to be read in (e.g., "r*.pop")
#' @return tables named list of tables
readPopOfDir <- function(dir, whatPop) {
#   cwd <- getwd()
#   setwd(dir)
  popFiles <- grep(whatPop, list.files(dir), value=T)
  tables <- lapply(sapply(popFiles, function(x) file.path(dir,x)), readPop)
  names(tables) <- sub("(.+)\\.pop","\\1", popFiles) #sub("[a-zA-Z0]*([1-9]+)[a-zA-Z]*","\\1", popFiles)
#   setwd(cwd)
  tables
}

#' read replicates of several simulations stored separate folders
#' @param dirs vector of directores each of which contains pop files
#' @return nested named list of named lists of population tables
readPopOfDirs <- function(dirs, whatPop) {
  tablesz <- lapply(dirs, readPopOfDir, whatPop)
  names(tablesz) <- sub(".+[/\\](.+)$", "\\1", dirs)
  tablesz
}

#' partition a table, get either upper, middle, or lower part
#'â™¡@param tab table to be partitioned
#' @param whichPart which part of the table to be retained
#' @param size number of rows of retained part of table
getPart <- function(tab, whichPart, size=100) {
  if (whichPart == "upper") {
    i <- 1
    j <- i+size-1
  } else if (whichPart == "middle") {
    i <- (nrow(tab)/2) - floor(size/2) + 1
    j <- (nrow(tab)/2) + ceiling(size/2)
  } else if (whichPart == "lower") {
    i <- nrow(tab) - size + 1
    j <- nrow(tab)
  } else stop("'whichPart' should be either 'upper', 'middle', or ' lower'")
    
   tab[i:j,]
}

getParts <- function(tabs, whichPart, size=100) 
  lapply(tabs, function(tab) getPart(tab, whichPart, size))

getParts2 <- function(listOfListsOfTabs, whichPart, size=100) 
  lapply(listOfListsOfTabs, function(tabs) getParts(tabs, whichPart, size))

getParts3 <- function(listOfListsListsOfTabs, whichPart, size=100) 
  lapply(listOfListsListsOfTabs, function(x) getParts2(x, whichPart, size))

#' give a list of tables of intermediate populations of n replicates and g generations, separate
#' tables according to each generation (option 'g'), or each replicate (option 'r')
#' @param tabs list of (intermediate) populations. names should follow pattern "t[0-9]+_g[0-9]+\.pop"
#' @param gr character either 'g' or 'r', indicating if tables should be clustered together according
#'        to generations or replicates
#' @return named list A of named lists B of named tables C, where each element of A contains a list
#'        of either each generation, or each replicate (depending on gr parameter)
separateIntermediatePops <- function(tabs, gr) {
  if (!all( sapply(names(tabs), function(x) substring(x,1,1)) == "t" ))
    warning("not all table names start with 't', probably not pure intermediate populations or empty?")
  
  if (gr == 'g') 
    grs_unique <- unique(sub("t.+_(g.+)", "\\1", names(tabs))) # all existing generations
  else if (gr == 'r')
    grs_unique <- unique(sub("(t.+)_g.+", "\\1", names(tabs))) # all existing generations
  else stop ("gr parameter needs to be either 'g' or 'r")
  
  res <- lapply(grs_unique, function(gr) {
    tmpNames <- grep(gr, names(tabs))
    tabs[tmpNames]
  })
  names(res) <- grs_unique
  res
}

separateIntermediatePops2 <- function(listOfListsOfTabs, gr) 
  lapply(listOfListsOfTabs, separateIntermediatePops, gr)

#########################
### analysis functions

#' get mean values of specific columns for a set of tables
#' @param tabs list of tables containing same number of rows (nrow(table) == n)
#' @param whichColumns vector of column names contained in every table, size m
#' @return single table of size n x m containing mean values for same rows across all tables
getStatsOf <- function(tabs, f,
                       whichColumns=c(
                         "count",
                         "mean.count",
                         "number.mutations",
                         "fitness",
                         "number.drivers",
                         "number.superdrivers",
                         "number.mutators")) 
{
  if (length(tabs) < 1) {
    warning("length of tabs is < 1")
    return(NULL)
  } 
  if (!all(nrow(tabs[[1]] == sapply(tabs, nrow))))
    stop("all tables are required to have equal number of rows")
  
  sapply(whichColumns, function(column) {
    tmp_table <- sapply(tabs, function(tab) tab[,column])
    f(tmp_table)
  })
}

getMeansOf <- function(tab) getStatsOf(tab, rowMeans)
  
#' perform getMeansOf for a list of lists of tables
getMeansOf2 <- function(listOfListsOfTabs)
  lapply(listOfListsOfTabs, getMeansOf)

#' perform getMeansOf for a list of lists of tables
getMeansOf3 <- function(listOfListsOfListsOfTabs)
  lapply(listOfListsOfListsOfTabs, getMeansOf2)

getSDsOf <- function(tab) getStatsOf(tab, function(x) apply(x, 1, sd))

getSDsOf2 <- function(listOfListsOfTabs) 
  lapply(listOfListsOfTabs, getSDsOf)

getSDsOf3 <- function(listOfListsOfListsOfTabs) 
  lapply(listOfListsOfListsOfTabs, getSDsOf2)

test <- function(dir) {
  return(c(dira = 3, dirb=4))
}